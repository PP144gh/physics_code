from neutrino_defs import *

#reads file with parameters and prints them + some important matrices and quantitities

file = open("na.txt","r")
#file = open("nac.txt","r")

ct=0
for linesl in file:
      plist=[]
      lines=linesl.split()
      m1ev=float(lines[0])
      d31=float(lines[1])
      d21=float(lines[2])
      M1=float(lines[3])
      M2=float(lines[4])
      M3=float(lines[5])
      t12=float(lines[6])
      t13=float(lines[7])
      t23=float(lines[8])
      r12=float(lines[9])
      r13=float(lines[10])
      r23=float(lines[11])
      f13=float(lines[12])
      f12=float(lines[13])
      f23=float(lines[14])
      delta=float(lines[15])
      dm1=float(lines[16])
      dm2=float(lines[17])
      sign=float(lines[18])
      plist.append(m1ev)
      plist.append(d31)
      plist.append(d21)
      plist.append(M1)
      plist.append(M2)
      plist.append(M3)
      plist.append(t12)
      plist.append(t13)
      plist.append(t23)
      plist.append(r12)
      plist.append(r13)
      plist.append(r23)
      plist.append(f13)
      plist.append(f12)
      plist.append(f23)
      plist.append(delta)
      plist.append(dm1)
      plist.append(dm2)
      plist.append(sign)
      #print(plist)


      print("CASO")
      print(ct)
      #calculo de matrizes do modelo
      K, V, H, H2, X, m1, m2, m3, M1, M2, M3, m, M, D, d, etal, Kl, Xl, dl, Dl, Rl, Zl, R, Z, Oc, eta, deltaML, Mcaloop, VZ, ep, ep1, ep2, ep3, Nnu, zd, d31l, d21l, mdagm=calc(plist,v,mH,mZ)

    
      print("params")
      print("M1(GeV)")
      mp.nprint(M1*evtogev,5)
      print("M2(GeV)")
      mp.nprint(M2*evtogev,5)
      print("M3(GeV)")
      mp.nprint(M3*evtogev,5)
      print("m1(eV)")
      mp.nprint(m1,5)
      print("m2(eV)")
      mp.nprint(m2,5)
      print("m3(eV)")
      mp.nprint(m3,5)
      print("d31(10e-3 eV^2)")
      mp.nprint(d31*10**(3),5)
      print("d21(10e-5 eV^2)")
      mp.nprint(d21*10**(5),5)
      print("t12")
      mp.nprint(t12,5)
      print("t13")
      mp.nprint(t13,5)
      print("t23")
      mp.nprint(t23,5)
      print("delta(pi)")
      mp.nprint(delta/pi,5)
      print("dm1(pi)")
      mp.nprint(dm1/pi,5)
      print("dm2(pi)")
      mp.nprint(dm2/pi,5)
      print("dev_unit")
      print("sign")
      mp.nprint(sign)
      print("r12")
      mp.nprint(r12,5)
      print("r13")
      mp.nprint(r13,5)
      print("r23")
      mp.nprint(r23,5)
      print("f12(pi)")
      mp.nprint(f12/pi,5)
      print("f13(pi)")
      mp.nprint(f13/pi,5)
      print("f23(pi)")
      mp.nprint(f23/pi,5)

      print("matrices")
      print("m(GeV)")
      mp.nprint(mp.chop(m*evtogev),5)
      print("mdagm(GeV^2)")
      mp.nprint(mp.chop(mdagm*evtogev**2),5)
      print("M(GeV)")
      mp.nprint(mp.chop(M*evtogev),5)
      print("deltaML(GeV)")
      mp.nprint(mp.chop(deltaML*evtogev),5)
      print("Oc")
      mp.nprint(mp.chop(Oc),5)
      print("X")
      mp.nprint(mp.chop(X),5)
      print("Xl")
      mp.nprint(mp.chop(Xl),5)
      print("eta")
      mp.nprint(mp.chop(eta),5)
      print("etal")
      mp.nprint(mp.chop(etal),5)
      print("K")
      mp.nprint(mp.chop(K),5)
      print("Kl")
      mp.nprint(mp.chop(Kl),5)
      print("R")
      mp.nprint(mp.chop(R),5)
      print("Rl")
      mp.nprint(mp.chop(Rl),5)
      print("VZ")
      mp.nprint(mp.chop(VZ),5)
      print("Z")
      mp.nprint(mp.chop(Z),5)
      print("Zl")
      mp.nprint(mp.chop(Zl),5)
      print("d(eV)")
      mp.nprint(mp.chop(d),5)
      print("dl(eV)")
      mp.nprint(mp.chop(dl),5)
      print("D(GeV)")
      mp.nprint(mp.chop(D*evtogev),5)
      print("Dl(GeV)")
      mp.nprint(mp.chop(Dl*evtogev),5)
      print("d31l(10e-3 eV^2)")
      mp.nprint(d31l*10**(3),5)
      print("d21l(10e-5 eV^2)")
      mp.nprint(d21l*10**(5),5)

      

      print("pheno")
      print("ep")
      mp.nprint(ep1,5)
      mp.nprint(ep2,5)
      mp.nprint(ep3,5)
      mp.nprint(mp.chop(ep),5)
      print("Nnu")
      print(Nnu)
      print("zero distance")
      mp.nprint(mp.chop(zd),5)

            
      
      

     

      
      ct=ct+1;
file.close()
      

  
